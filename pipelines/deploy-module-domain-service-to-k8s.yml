# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  paths:
    include:
      - src/ModuleDomainService/**
  branches:
    include:
      - master
      
resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'Container registry connection'
  imageRepository: 'module-domain-service'
  containerRegistry: 'hsleidenmdlo.azurecr.io'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'mdlo-auth'
  solutionPath: 'src/ModuleDomainService'
  projectPath: '$(solutionPath)/ModuleDomainService.Application'
  dockerfilePath: 'docker/normal/Dockerfile'
  integrationTestPath: '$(solutionPath)/ModuleDomainService.IntegrationTest'
  buildConfiguration: 'Release'
  testProjects: |
    $(solutionPath)/ModuleDomainService.Application.Test
    $(solutionPath)/ModuleDomainService.Domain.Test
    $(solutionPath)/ModuleDomainService.Infrastructure.Test
  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  buildvmImageName: 'windows-latest'
  projectKey: MDLO:module-domain-service
  projectName: MDLO Module Domain Service

stages:
- stage: Build
  displayName: Build and Analyze
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(buildvmImageName)
    steps:
      - task: SonarQubePrepare@4
        condition: eq(variables['build.sourcebranch'], 'refs/heads/master')
        displayName: Prepare SonarQube
        inputs:
          SonarQube: 'Sonarcloud connection'
          scannerMode: 'MSBuild'
          projectKey: $(projectKey)
          projectName: $(projectName)
          extraProperties: sonar.exclusions=**\*.js,**\bootstrap*.css,**\DataTables\**\*.css,**\roslyn\*,**\Global.asax.cs,**\Migrations\**

      - task: DotNetCoreCLI@2
        displayName: 'dotnet build'
        inputs:
          projects: '$(projectPath)/*.csproj'
          arguments: '--configuration $(BuildConfiguration)'

      - task: DotNetCoreCLI@2
        displayName: 'dotnet test'
        inputs:
          command: test
          projects: $(testProjects)
          arguments: '--configuration $(BuildConfiguration) --collect:"Code Coverage"'

      - task: SonarQubeAnalyze@4
        displayName: Analyze with SonarQube
        condition: eq(variables['build.sourcebranch'], 'refs/heads/master')

      - task: SonarQubePublish@4
        displayName: Publish with SonarQube
        condition: eq(variables['build.sourcebranch'], 'refs/heads/master')
        inputs:
          pollingTimeoutSec: '300'

      - task: sonar-buildbreaker@8
        displayName: Breaking build with SonarQube
        condition: eq(variables['build.sourcebranch'], 'refs/heads/master')
        inputs:
          SonarQube: 'Sonarqube connection'

      - task: DotNetCoreCLI@2
        displayName: 'dotnet publish'
        inputs:
          command: publish
          publishWebProjects: false
          projects: $(projectPath)/*.csproj
          arguments: '--configuration Release --self-contained -f "netcoreapp3.1" -r "linux-x64" --output "$(projectPath)/obj/Docker/publish"'
          zipAfterPublish: false
          modifyOutputPath: false

      - publish: 'manifests'
        artifact: manifests

      - task: PublishPipelineArtifact@1
        inputs:
          path: $(projectPath)/obj/Docker/publish
          artifact: ModuleDomainService

  - job: Publish
    displayName: Publish
    dependsOn: Build
    condition: eq(variables['build.sourcebranch'], 'refs/heads/master')
    pool:
      vmImage: $(vmImageName)
    steps:
      - task: DownloadPipelineArtifact@2
        inputs:
          artifact: ModuleDomainService
          path: $(projectPath)/obj/Docker/publish

      - task: Docker@2
        inputs:
          containerRegistry: '$(dockerRegistryServiceConnection)'
          repository: '$(imageRepository)'
          command: 'build'
          Dockerfile: 'docker/normal/Dockerfile'
          tags: |
            $(tag)
            latest
          arguments: '--build-arg source=$(projectPath)/obj/Docker/publish --build-arg runnable=ModuleDomainService.Application.dll'

      - task: Docker@2
        inputs:
          containerRegistry: '$(dockerRegistryServiceConnection)'
          repository: '$(containerRegistry)'
          command: 'push'

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy
    condition: eq(variables['build.sourcebranch'], 'refs/heads/master')
    pool:
      vmImage: $(vmImageName)
    environment: 'MDLO.staging'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: 'createSecret'
              kubernetesServiceConnection: 'MDLO-mdlo-staging-1591281470325'
              namespace: 'macedonieje'
              secretType: 'dockerRegistry'
              secretName: '$(imagePullSecret)'
              dockerRegistryEndpoint: '$(dockerRegistryServiceConnection)'

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: 'MDLO-mdlo-staging-1591281470325'
              namespace: 'staging'
              manifests: 'manifests/staging/deploy-module-domain-service-to-k8s.yml'
              containers: '$(containerRegistry)/$(imageRepository):$(tag)'
              imagePullSecrets: '$(imagePullSecret)'
