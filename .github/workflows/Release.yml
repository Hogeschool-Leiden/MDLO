name: Release

# on:
#   push:
#     branches:
#       - component-testing-pipeline-feature

#     # Publish `v1.2.3` tags as releases.
#     tags:
#       - v*
# env:
#   # TODO: Change variable to your image's name.
#   IMAGE_NAME: demo

# jobs:
#   test:
#     runs-on: ubuntu-latest
#     strategy: 
#       matrix:
#         testtype: ['ComponentTest', 'Test']
#         services: ['DemoFrontend', 'Demo']
#     name: Running ${{ matrix.services }} ${{ matrix.testtype }}s
#     steps:
#     - uses: actions/checkout@v2
#     - name: Setup dotnet install
#       uses: actions/setup-dotnet@v1
#       with: 
#         dotnet-version: '3.1.100'

#     - name: Run tests
#       run: dotnet test ${{ matrix.services }}/${{ matrix.services }}.Api.${{matrix.testtype}}/${{ matrix.services }}.Api.${{matrix.testtype}}.csproj
# name: Release

on:
  push:   # Change to pull_request when done
    branches:
      - component-testing-pipeline-feature  # Change to master when done

    tags:
      - v*
# env:
#   # TODO: Change variable to your image's name.
#   IMAGE_NAME: demo

jobs:
  publish-docker-images:
    env: 
      IMAGE_NAME: ${{ matrix.solution-name }}
    runs-on: [ubuntu-latest]
    strategy:
      fail-fast: true
      matrix:
        solution-name: [Demo, DemoFrontend]     # Should be the same as whats in front of the .sln. The containing map as seen from the git root should be the same.
    steps:
    - uses: actions/checkout@v2
    - name: Create docker image ${{ matrix.solution-name }} solution 
    - uses: azure/docker-login@v1
      with:
        login-server: docker.pkg.github.com
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - run: |
        docker build ${{ matrix.solution-name }}/ -t $( hsl-mdlo-${{ matrix.solution-name }}:staging | tr '[:upper:]' '[:lower:]')
        docker push $( hsl-mdlo-${{ matrix.solution-name }}:staging | tr '[:upper:]' '[:lower:]')
#   sonarqube-analyze:  
#     runs-on: [linux, self-hosted]
#     name: Analyzing code
#     env: 
#       SONAR_TOKEN: ${{ secrets.SONAR_DEMO_API_TOKEN }}
#       SONAR_HOST: ${{ secrets.SONAR_HOST }}
#     steps:
#       - uses: actions/setup-java@v1
#         with:
#           java-version: '9.0.4' # The JDK version to make available on the path.
#           java-package: jdk # (jre, jdk, or jdk+fx) - defaults to jdk
#           architecture: x64 # (x64 or x86) - defaults to x64
#       - uses: actions/checkout@v2
#       - name: Setup dotnet install
#         uses: actions/setup-dotnet@v1
#         with: 
#           dotnet-version: '3.1.100'
#       - name: Install SonarCloud scannerr
#         run: |
#           echo "::set-env name=PATH::${PATH}:${HOME}/.dotnet/tools"
#       - name: Attaching SonarQube to dotnet
#         run: dotnet sonarscanner begin /k:"mdlo-demo-api" /d:sonar.host.url="http://145.97.16.187:9000/" /d:sonar.login="$SONAR_TOKEN"
#       - name: Running tests, building solution
#         run: dotnet build Demo/Demo.sln
#       - name: Finishing SonarQube scan
#         run: dotnet sonarscanner end /d:sonar.login="$SONAR_TOKEN"
        
        
#   test:
#     runs-on: ubuntu-latest
#     strategy: 
#       matrix:
#         testtype: ['ComponentTest', 'Test']
#         services: ['DemoFrontend', 'Demo']
#     name: Running ${{ matrix.services }} ${{ matrix.testtype }}s
#     steps:
#     - uses: actions/checkout@v2
#     - name: Setup dotnet install
#       uses: actions/setup-dotnet@v1
#       with: 
#         dotnet-version: '3.1.100'

#     - name: Run tests
#       run: dotnet test ${{ matrix.services }}/${{ matrix.services }}.Api.${{matrix.testtype}}/${{ matrix.services }}.Api.${{matrix.testtype}}.csproj
